// Middleware for verifying the authenticity of user tokens.
/**
 * @module authMiddleware
 */

/**
 * Express middleware to verify user authentication tokens.
 * Extracts the token from the Authorization header, verifies it using jsonwebtoken,
 * and attaches the decoded user payload to the request object as req.user.
 *
 * If the token is invalid or missing, it sends a 401 Unauthorized response.
 *
 * @param {express.Request} req - Express request object.
 * @param {express.Response} res - Express response object.
 * @param {express.NextFunction} next - Express next middleware function.
 *
 * @throws {Error} If there is an error during token verification.
 * @returns {void}
 */
const authMiddleware = (req, res, next) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Unauthorized' });
    }

    const token = authHeader.split(' ')[1];
    if (!token) {
      return res.status(401).json({ error: 'Unauthorized' });
    }
    
    const authConfig = require('../../config/auth.js');

    const decoded = require('jsonwebtoken').verify(token, authConfig.jwtSecret);
    req.user = decoded;
    next();
  } catch (error) {
     if (error.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token Expired' });
    }
    return res.status(401).json({ error: 'Unauthorized' });
  }
};


module.exports = authMiddleware;