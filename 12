const express = require('express');
const router = express.Router();
const { getGoals, getGoalById, createGoal, updateGoal, deleteGoal } = require('../controllers/goalController');
const { authMiddleware } = require('../middleware/authMiddleware');
const { errorMiddleware } = require('../middleware/errorMiddleware');
const { body, param, validationResult } = require('express-validator');

// GET /api/goals
router.get('/', authMiddleware, async (req, res, next) => {
  try {
    const goals = await getGoals(req);
    res.status(200).json(goals);
  } catch (error) {
    next(error);
  }
});

// GET /api/goals/:id
router.get('/:id', authMiddleware, param('id').isMongoId().withMessage('Invalid goal ID'), async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  try {
    const goal = await getGoalById(req.params.id, req);
      if(!goal) {
        return res.status(404).json({error: 'Goal not found.'})
      }
    res.status(200).json(goal);
  } catch (error) {
    next(error);
  }
});

// POST /api/goals
router.post('/', authMiddleware, [
  body('title').notEmpty().withMessage('Title is required').trim().escape(),
  body('description').notEmpty().withMessage('Description is required').trim().escape(),
  body('target').notEmpty().withMessage('Target is required').isNumeric().withMessage('Target must be a number').trim().escape(),
], async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
    try {
      const newGoal = await createGoal(req.body, req);
      res.status(201).json(newGoal);
    } catch (error) {
      next(error);
    }
  });
  

// PUT /api/goals/:id
router.put('/:id', authMiddleware, [
    param('id').isMongoId().withMessage('Invalid goal ID'),
    body('title').notEmpty().withMessage('Title is required').trim().escape(),
    body('description').notEmpty().withMessage('Description is required').trim().escape(),
    body('target').notEmpty().withMessage('Target is required').isNumeric().withMessage('Target must be a number').trim().escape(),
], async (req, res, next) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
  try {
        const updatedGoal = await updateGoal(req.params.id, req.body, req);
         if(!updatedGoal) {
        return res.status(404).json({error: 'Goal not found.'})
      }
    res.status(200).json(updatedGoal);
  } catch (error) {
    next(error);
  }
});

// DELETE /api/goals/:id
router.delete('/:id', authMiddleware, param('id').isMongoId().withMessage('Invalid goal ID'), async (req, res, next) => {
  const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
  try {
    const deletedGoal = await deleteGoal(req.params.id, req);
       if(!deletedGoal) {
        return res.status(404).json({error: 'Goal not found.'})
      }
    res.status(204).send();
  } catch (error) {
      next(error);
  }
});

router.use(errorMiddleware);

module.exports = router;