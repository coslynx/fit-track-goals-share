// api/server.js
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import { authRoutes } from './routes/authRoutes.js';
import { goalRoutes } from './routes/goalRoutes.js';
import { trackingRoutes } from './routes/trackingRoutes.js';
import { socialRoutes } from './routes/socialRoutes.js';
import { errorMiddleware } from './middleware/errorMiddleware.js';
import { db } from '../config/db.js';
import { auth } from '../config/auth.js';

dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

// Enable CORS for all origins
app.use(cors());

// Parse JSON request bodies
app.use(express.json());

// Connect to MongoDB
db()
  .then(() => {
    console.log('MongoDB Connected');
  })
  .catch((err) => {
    console.error('MongoDB Connection Error:', err);
    process.exit(1);
  });


//Mount Routes
app.use('/api/auth', authRoutes);
app.use('/api/goals', auth.authenticateToken, goalRoutes);
app.use('/api/tracking', auth.authenticateToken, trackingRoutes);
app.use('/api/social', auth.authenticateToken, socialRoutes);

// Global error handling middleware
app.use(errorMiddleware);

const server = app.listen(port, () => {
  console.log(Server running on port ${port});
});

export default server;