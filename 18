import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from './config/db.js';
import authRoutes from './routes/authRoutes.js';
import goalRoutes from './routes/goalRoutes.js';
import trackingRoutes from './routes/trackingRoutes.js';
import socialRoutes from './routes/socialRoutes.js';
import { errorMiddleware } from './middleware/errorMiddleware.js';


dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

// Enable CORS
app.use(cors());
// Parse JSON request bodies
app.use(express.json());


// Database connection
try {
  await connectDB();
  console.log("MongoDB connected successfully");
} catch (error) {
  console.error("MongoDB connection error:", error.message);
    process.exit(1);
}


// Routes
app.use('/api/auth', authRoutes);
app.use('/api/goals', goalRoutes);
app.use('/api/tracking', trackingRoutes);
app.use('/api/social', socialRoutes);

// Ping endpoint
app.get('/ping', (req, res) => {
    res.status(200).json({message: 'pong'});
});

// Catch-all route
app.use((req, res) => {
    res.status(404).json({ message: 'Not Found' });
});

// Error handling middleware
app.use(errorMiddleware);


// Server initialization
try {
    const server = app.listen(port, () => {
        console.log(Server running on port ${port});
    });
    
  server.on('error', (error) => {
    console.error("Server startup error:", error.message);
    process.exit(1);
    });
} catch (error) {
  console.error("Server startup error:", error.message);
    process.exit(1);
}