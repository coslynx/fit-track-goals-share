const express = require('express');
const { ObjectId } = require('mongodb');
const { verifyToken } = require('../middleware/authMiddleware');
const { Post } = require('../models/Post');
const { sanitize } = require('../utils/helpers');

const router = express.Router();

// Create a new social post
router.post('/', verifyToken, async (req, res) => {
  try {
    const { content } = req.body;
    const userId = req.user.id;

    if (!content) {
      return res.status(400).json({ message: "Error", error: "Post content is required" });
    }


    const sanitizedContent = sanitize(content)

    const newPost = new Post({
      content: sanitizedContent,
      author: userId,
      createdAt: new Date()
    });

    const savedPost = await newPost.save();
    res.status(201).json({ message: "Post created successfully", data: savedPost });
  } catch (error) {
    console.error("Error creating post:", error);
    res.status(500).json({ message: "Error", error: "Failed to create post" });
  }
});

// Get all social posts
router.get('/', async (req, res) => {
  try {
    const posts = await Post.find()
      .populate('author', 'username')
      .sort({ createdAt: -1 })
      .lean();

    res.status(200).json({ message: "Posts retrieved successfully", data: posts });
  } catch (error) {
    console.error("Error fetching posts:", error);
    res.status(500).json({ message: "Error", error: "Failed to fetch posts" });
  }
});


// Update a social post
router.put('/:id', verifyToken, async (req, res) => {
  try {
      const postId = req.params.id;
      const { content } = req.body;

      if (!content) {
        return res.status(400).json({ message: "Error", error: "Post content is required for update" });
      }
      const sanitizedContent = sanitize(content);
  
      const updatedPost = await Post.findByIdAndUpdate(
          postId,
          { content: sanitizedContent },
          { new: true, runValidators: true }
      ).lean();
    
    if (!updatedPost) {
      return res.status(404).json({ message: "Error", error: "Post not found" });
    }

    res.status(200).json({ message: "Post updated successfully", data: updatedPost });
  } catch (error) {
    console.error("Error updating post:", error);
    res.status(500).json({ message: "Error", error: "Failed to update post" });
  }
});


// Delete a social post
router.delete('/:id', verifyToken, async (req, res) => {
    try {
        const postId = req.params.id;
        const deletedPost = await Post.findByIdAndDelete(postId);

        if (!deletedPost) {
            return res.status(404).json({ message: "Error", error: "Post not found" });
        }

        res.status(204).send();
    } catch (error) {
        console.error("Error deleting post:", error);
        res.status(500).json({ message: "Error", error: "Failed to delete post" });
    }
});

module.exports = router;