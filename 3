// api/server.js
// Import necessary modules
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDB } from '../config/db.js';
import authRoutes from './routes/authRoutes.js';
import goalRoutes from './routes/goalRoutes.js';
import trackingRoutes from './routes/trackingRoutes.js';
import socialRoutes from './routes/socialRoutes.js';
import { errorHandler } from './middleware/errorMiddleware.js';

// Load environment variables from a .env file
dotenv.config();

// Create an Express application instance
const app = express();

// Configure CORS to allow requests from any origin (for MVP simplicity)
app.use(cors());

// Parse request bodies as JSON
app.use(express.json());

// Establish a connection to the MongoDB database
connectDB()
    .then(() => {
        console.log('MongoDB connected successfully.');
    })
    .catch((err) => {
        console.error('MongoDB connection error:', err);
        process.exit(1); // Exit process if DB connection fails.
    });

// Mount the defined API routes
app.use('/api/auth', authRoutes);
app.use('/api/goals', goalRoutes);
app.use('/api/tracking', trackingRoutes);
app.use('/api/social', socialRoutes);

// Use the error handling middleware
app.use(errorHandler);

// Start the Express server
const PORT = process.env.PORT || 5000;

const server = app.listen(PORT, () => {
    console.log(Server is running on port ${PORT});
});

// Handle server startup errors
server.on('error', (err) => {
    console.error('Server startup error:', err);
});

process.on('unhandledRejection', (err) => {
  console.error('Unhandled rejection:', err);
});

process.on('uncaughtException', (err) => {
    console.error('Uncaught exception:', err);
     process.exit(1);
});