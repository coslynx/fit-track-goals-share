/**
 * @fileoverview This file defines the authController.js which handles authentication-related API endpoints,
 * specifically user login, registration, and logout.
 */

import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { User } from '../models/User.js';
import { validateSignup, validateLogin } from '../../utils/validators.js';
import { handleErrors } from '../middleware/errorMiddleware.js';
import { UserType } from '../../types/User.js';
import { config } from '../../config/auth.js';


/**
 * Handles user registration.
 * @param {Request} req - Express request object containing user details.
 * @param {Response} res - Express response object to send back the response.
 * @returns {Promise<void>} - Promise that resolves after sending the response.
 */
const signup = async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, email, password } = req.body;

    const { errors, valid } = validateSignup(req.body);

    if (!valid) {
        return handleErrors(res, 400, errors, "Signup validation failed");
    }

    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser) {
        return handleErrors(res, 400, { message: 'Username or email already exists' }, "User already exists");
    }


    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser: UserType = new User({
      username,
      email,
      password: hashedPassword,
    });


    await newUser.save();

     const token = jwt.sign({ userId: newUser._id }, config.jwtSecret, {
         expiresIn: '1h',
     });
        
     res.status(201).json({
            token,
            success: "User registered successfully",
        });
  } catch (error: any) {
        handleErrors(res, 500, { message: error.message }, "Signup failed");
  }
};


/**
 * Handles user login.
 * @param {Request} req - Express request object containing login details.
 * @param {Response} res - Express response object to send back the response.
 * @returns {Promise<void>} - Promise that resolves after sending the response.
 */
const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, password } = req.body;

    const { errors, valid } = validateLogin(req.body);

    if (!valid) {
        return handleErrors(res, 400, errors, "Login validation failed");
    }


    const user: UserType | null = await User.findOne({ username });
    if (!user) {
         return handleErrors(res, 404, { message: 'Invalid credentials' }, "User not found");
    }

      const passwordMatch = await bcrypt.compare(password, user.password);
      if (!passwordMatch) {
           return handleErrors(res, 400, { message: 'Invalid credentials' }, "Password does not match");
      }
      const token = jwt.sign({ userId: user._id }, config.jwtSecret, {
         expiresIn: '1h',
      });
        
      res.status(200).json({
            token,
             success: "Logged in successfully",
        });
  } catch (error: any) {
        handleErrors(res, 500, { message: error.message }, "Login failed");
    }
};


/**
 * Handles user logout.
 * @param {Request} req - Express request object with authentication token
 * @param {Response} res - Express response object to send back the response.
 * @returns {Promise<void>} - Promise that resolves after sending the response.
 */
const logout = async (req: Request, res: Response): Promise<void> => {
    try {
        // Ideally, implement token revocation logic here if needed.
        // For simple MVP, we just send back success, token will expire automatically

        res.status(200).json({ message: 'Logged out successfully' });
    } catch (error: any) {
        handleErrors(res, 500, { message: error.message }, "Logout failed");
    }
}


export { signup, login, logout };