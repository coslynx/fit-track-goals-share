import express, { Application, Request, Response, NextFunction } from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import mongoose from 'mongoose';
import { authRoutes } from './routes/authRoutes';
import { goalRoutes } from './routes/goalRoutes';
import { trackingRoutes } from './routes/trackingRoutes';
import { socialRoutes } from './routes/socialRoutes';
import { errorHandler } from './middleware/errorMiddleware';

dotenv.config({ path: '../../.env' });

const app: Application = express();
const allowedOrigins = ['http://localhost:3000', 'http://localhost:5173'];

app.use(cors({
    origin: (origin, callback) => {
        if (!origin || allowedOrigins.includes(origin)) {
            callback(null, true);
        } else {
            callback(new Error('Not allowed by CORS'));
        }
    },
    credentials: true,
}));

app.use(express.json());

const dbUrl = process.env.MONGODB_URI;

if (!dbUrl) {
    console.error('MongoDB connection string not found. Please set the MONGODB_URI environment variable.');
    process.exit(1);
}


mongoose.connect(dbUrl)
    .then(() => console.log('Connected to MongoDB'))
    .catch((err: any) => {
        console.error('Could not connect to MongoDB:', err);
        process.exit(1);
    });



app.use('/api', authRoutes);
app.use('/api', goalRoutes);
app.use('/api', trackingRoutes);
app.use('/api', socialRoutes);


app.use(errorHandler);


app.use((err: any, req: Request, res: Response, next: NextFunction) => {
    console.error('Uncaught exception:', err);
    errorHandler(err, req, res, next);
  });


const port = process.env.PORT || 5000;

app.listen(port, () => console.log(Server running on port ${port}));