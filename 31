const express = require('express');
const mongoose = require('mongoose');
const Post = require('../models/Post');
const { verifyToken } = require('../middleware/authMiddleware');
const createHttpError = require('http-errors');
const { sanitize } = require('express-validator');

const router = express.Router();

/**
 * Create a new social post
 * @param {express.Request} req - Express request object
 * @param {express.Response} res - Express response object
 * @param {express.NextFunction} next - Express next function
 */
router.post('/', verifyToken, sanitize('content').escape(), async (req, res, next) => {
    try {
        const { content } = req.body;
        const userId = req.user.id;

        if (!content) {
            return next(createHttpError(400, 'Post content is required'));
        }

        const newPost = new Post({
            content,
            user: userId,
            createdAt: new Date(),
            updatedAt: new Date()
        });

        const savedPost = await newPost.save();
        res.status(201).json(savedPost);

    } catch (error) {
       
        next(createHttpError(400, 'Failed to create post', { details: error.message}));
    }
});


/**
 * Retrieve all social posts with pagination
 * @param {express.Request} req - Express request object
 * @param {express.Response} res - Express response object
 * @param {express.NextFunction} next - Express next function
 */
router.get('/', async (req, res, next) => {
    const page = parseInt(req.query.page) || 1;
    const pageSize = parseInt(req.query.pageSize) || 10;
    
    try {
      const totalPosts = await Post.countDocuments();
      const totalPages = Math.ceil(totalPosts / pageSize);
      if(page > totalPages){
           return res.status(200).json({posts:[], totalPages: totalPages, currentPage: page});
       }

        const posts = await Post.find()
            .sort({ createdAt: -1 })
            .skip((page - 1) * pageSize)
            .limit(pageSize);

        res.status(200).json({posts, totalPages, currentPage: page});

    } catch (error) {
       
       next(createHttpError(500, 'Failed to retrieve posts', {details: error.message}));
    }
});

module.exports = router;