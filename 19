const express = require('express');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const authConfig = require('../../config/auth');

const router = express.Router();

const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ status: 'error', message: 'Email and password are required.' });
    }

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ status: 'error', message: 'User not found.' });
    }

    const passwordMatch = await bcrypt.compare(password, user.password);

    if (!passwordMatch) {
      return res.status(401).json({ status: 'error', message: 'Invalid credentials.' });
    }

    const token = jwt.sign({ id: user._id, email: user.email }, authConfig.jwtSecret, {
      expiresIn: '2h',
    });

    return res.status(200).json({
      status: 'success',
      message: 'Login successful.',
      data: { token },
    });
  } catch (error) {
      console.error('Login error:', error);
      return res.status(500).json({ status: 'error', message: 'Internal server error during login.' });
  }
};

const signup = async (req, res) => {
    try {
      const { username, email, password } = req.body;
      if (!username || !email || !password) {
        return res.status(400).json({ status: 'error', message: 'Username, email, and password are required.' });
      }
      if (password.length < 8) {
          return res.status(400).json({ status: 'error', message: 'Password must be at least 8 characters long.' });
        }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          return res.status(400).json({status: 'error', message: 'Invalid email format.'});
        }


        const existingUser = await User.findOne({ email });
        if (existingUser) {
            return res.status(409).json({ status: 'error', message: 'User with this email already exists.' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = new User({ username, email, password: hashedPassword });
        await newUser.save();

        const token = jwt.sign({ id: newUser._id, email: newUser.email }, authConfig.jwtSecret, {
            expiresIn: '2h',
        });
    
          return res.status(201).json({
            status: 'success',
            message: 'User registered successfully.',
              data: { token },
          });
        
    } catch (error) {
        console.error('Signup error:', error);
        return res.status(500).json({ status: 'error', message: 'Internal server error during signup.' });
    }
};

const logout = (req, res) => {
  return res.status(200).json({ status: 'success', message: 'Logout successful.' });
};

module.exports = {
  login,
  signup,
  logout,
};