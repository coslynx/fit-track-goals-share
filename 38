import { Request, Response, NextFunction } from 'express';
import jwt, { JwtPayload } from 'jsonwebtoken';
import { secret } from '../../config/auth';

interface CustomRequest extends Request {
  userId?: string;
}

const authMiddleware = (req: CustomRequest, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader) {
      return res.status(401).json({ message: 'Unauthorized: No token provided' });
    }

    const tokenParts = authHeader.split(' ');

    if (tokenParts.length !== 2 || tokenParts[0] !== 'Bearer') {
        return res.status(401).json({ message: 'Unauthorized: Invalid token format' });
    }

    const token = tokenParts[1];


    if (!token) {
      return res.status(401).json({ message: 'Unauthorized: Invalid token format' });
    }

    const decoded = jwt.verify(token, secret) as JwtPayload;

    if (typeof decoded === 'string' || !decoded.userId) {
        return res.status(401).json({ message: 'Unauthorized: Invalid token' });
    }

    req.userId = decoded.userId;
    next();
  } catch (error:any) {
      if (error.name === 'TokenExpiredError') {
          return res.status(401).json({ message: 'Unauthorized: Invalid token' });
      } else if(error.name === 'JsonWebTokenError'){
          return res.status(401).json({ message: 'Unauthorized: Invalid token' });
      }

    return res.status(401).json({ message: 'Unauthorized: Invalid token' });
  }
};

export default authMiddleware;