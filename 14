// api/server.js
// Import necessary modules
import express from 'express';
import cors from 'cors';
import * as dotenv from 'dotenv';
import mongoose from 'mongoose';
import { authRoutes } from './routes/authRoutes.js';
import { goalRoutes } from './routes/goalRoutes.js';
import { trackingRoutes } from './routes/trackingRoutes.js';
import { socialRoutes } from './routes/socialRoutes.js';
import { errorMiddleware } from './middleware/errorMiddleware.js';
import { db } from '../config/db.js';

// Load environment variables from .env file
dotenv.config();

// Create an Express application
const app = express();

// Enable Cross-Origin Resource Sharing (CORS)
// Allow all origins during development, but configure specific origins for production
const corsOptions = {
  origin: '*',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true
};
app.use(cors(corsOptions));


// Use express.json() middleware to parse incoming JSON requests
app.use(express.json());

// Sanitize environment variables (basic example, can be extended)
const port = process.env.PORT ? parseInt(process.env.PORT, 10) : 3000;
const databaseUrl = process.env.DATABASE_URL ? process.env.DATABASE_URL.trim() : null;


// Main function to set up the server
async function main() {

  if (databaseUrl) {
       try {
          await db(databaseUrl);
          console.log('Database connected successfully.');
       } catch (error) {
          console.error('Database connection failed:', error);
          process.exit(1); // Exit process if database connection fails
       }
  } else {
      console.log('Database connection string not provided, skipping database connection.');
  }
  
  // Import and use routes
    app.use('/api/auth', authRoutes);
    app.use('/api/goals', goalRoutes);
    app.use('/api/tracking', trackingRoutes);
    app.use('/api/social', socialRoutes);

    // Use error handling middleware
    app.use(errorMiddleware);

    // Start the server and listen on the specified port
    app.listen(port, () => {
        console.log(Server is running on port ${port});
    });

}

// Check if this file is the main module and execute the main function
if (require.main === module) {
    main();
}