const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const Post = require('../models/Post');
const authMiddleware = require('../middleware/authMiddleware');

// Function to handle creation of a new social post
const createPost = async (req, res) => {
  try {
      // Validate request body
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }

      // Get post content from request body
    const { content } = req.body;

    if(!content || content.trim() === ""){
      return res.status(400).json({message: "Post content cannot be empty"});
    }

       // Get user ID from auth middleware
    const userId = req.user.id;


    // Create new post
    const newPost = new Post({
      content,
      userId,
      timestamp: new Date(),
    });

    // Save post to MongoDB
    const savedPost = await newPost.save();

    // Respond with saved post and 201 status code
    res.status(201).json(savedPost);

  } catch (error) {
    console.error('Error creating social post:', error);
      // Respond with error message and 500 status code
    res.status(500).json({ message: 'Failed to create social post', error: error.message });
  }
};

// Function to handle retrieval of all social posts
const getAllPosts = async (req, res) => {
  try {
      // Retrieve all social posts from MongoDB
    const posts = await Post.find().sort({ timestamp: -1 });

      // Respond with list of social posts and 200 status code
    res.status(200).json(posts);

  } catch (error) {
    console.error('Error getting social posts:', error);
     // Respond with error message and 500 status code
    res.status(500).json({ message: 'Failed to get social posts', error: error.message });
  }
};


// Route for creating a new social post (POST) and fetching all posts (GET), protected with auth middleware
router.post('/',authMiddleware,  [body('content').notEmpty()], createPost);
router.get('/', authMiddleware, getAllPosts);


module.exports = router;