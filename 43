// api/utils/tokenUtils.js
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';

dotenv.config({ path: './.env' });

const secret = process.env.JWT_SECRET || 'fallback_secret'; // Fallback for dev, needs to be set for production

/**
 * Generates a JWT token with a 1-hour expiration time.
 * @param {object} payload - The payload object to be encoded in the JWT.
 * @returns {string} The generated JWT token.
 * @throws {Error} If payload is not a valid object or if token generation fails.
 */
const generateToken = (payload) => {
    if (typeof payload !== 'object' || payload === null) {
      throw new Error('Payload must be a valid object');
    }

    try {
      const token = jwt.sign(payload, secret, { expiresIn: '1h' });
      return token;
    } catch (error) {
      console.error('JWT token generation error:', error);
      throw new Error('Failed to generate JWT token');
    }
};

/**
 * Verifies a JWT token and returns the decoded payload.
 * @param {string} token - The JWT token string to be verified.
 * @returns {object} The decoded payload if the token is valid.
 * @throws {Error} If the token is invalid or expired, or if token is not a string.
 */
const verifyToken = (token) => {
  if (typeof token !== 'string') {
    throw new Error('Token must be a string');
  }

    try {
      const decoded = jwt.verify(token, secret);
      return decoded;
    } catch (error) {
      console.error('JWT token verification error:', error);
      if (error.name === 'TokenExpiredError') {
        throw new Error('JWT token has expired');
      } else if (error.name === 'JsonWebTokenError') {
          throw new Error('JWT token is invalid');
      }
      throw new Error('JWT token verification failed');
    }
};

export { generateToken, verifyToken };